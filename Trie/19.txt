#include <iostream>
#include <fstream>
#include <vector>
#include <typeinfo>

using namespace std;

class Trie {
 public:
    //! Constructor
    explicit Trie() {
        root = new Node();
    }
 
    // I'M NOT SURE IF THIS IS WORKING
    //! Inserts a word into the Trie
    void insert(string word, unsigned long position, unsigned long length) {
        Node *current = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word[i] - 'a';
            if (current -> children[index] == NULL) {
                current -> children[index] = new Node();
            }
            current = current -> children[index];
        }
        current -> position = position;
        current -> length = length;
    }
    
 private:
    struct Node {
        Node *children[26];
        unsigned long position {0};
        unsigned long length {0};  // If bigger than 0, then is last character of a word
        
        //! Constructor
        explicit Node() {
            for (size_t i = 0; i < 26; i++) {
                children[i] = NULL;
            }
        }
    };
    
    Node *root;
};


//! Returns the dictionary word without brackets
/*!
  \return the dictionary word
 */
string get_dic_word(string word) {
    string dic_word = "";
    char character = '[';
    int i = 0;
    
    while (true) {
        i ++;
        character = word[i];
        if (character == ']') {
            return dic_word;
        }
        dic_word += character;
    }
}

int main() {

    string filename, word;
    cin >> filename;
    ifstream inFile;
    inFile.open(filename);
    int position = 0;
    Trie trie;
    
    vector<string> dic_words;  // Vector containing the dictionary words
    vector<unsigned long> positions;  // Vector containing the initial positions of the dictionary words
    vector<unsigned long> lengths;  // Vector containing the length of the dictionary words

    cout << filename;
    cout << endl;

    while (inFile) {  // While file still have words to read
        inFile >> word;
        string dic_word = "";
        for (size_t character = 0; character < word.length(); character++) {
            if (word[character] == '[') {
                positions.push_back(position);
                dic_words.push_back(get_dic_word(word));
            }
            position++;  // Counting the characters
        }
        position++;  // Counting the spaces
    }

    for (size_t i = 0; i < positions.size() - 1; i++) {
        lengths.push_back(positions.at(i+1) - positions.at(i) - 1);
    }
    lengths.push_back(position - positions.back() - 2 - dic_words.back().length());

    for (size_t i = 0; i < dic_words.size(); i++) {
        trie.insert(dic_words.at(i), positions.at(i), lengths.at(i));
    }
    
    // UNCOMMENT TO CHECK THE LISTS CREATED, THIS IS PROBABLY WORKING
    // for (size_t i = 0; i < positions.size(); i++) {
    //     cout << "Word: " << dic_words.at(i) << " ";
    //     cout << "Position: " << positions.at(i) << " ";
    //     cout << "Length: " << lengths.at(i) << endl;
    // }

}